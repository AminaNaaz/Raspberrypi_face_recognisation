import cv2
import numpy as np
import math
import matplotlib.pyplot as plt
import os
import pywt
import pywt.data
from glob import glob
N=list(range(40))
def extract(image):
                 
                 blur = cv2.GaussianBlur(image,(5,5),0)     # gaussian blur#
                 cv2.imshow("Filtered_image",blur)
                
                 coeffs = pywt.dwt2(blur, 'haar')       #Applying to dwt#
                 cA, (cH, cV, cD) = coeffs              # LL,LH,HL,HH extracting only LL
                 return cA

def dwt_b(image):
# Load image

    blur = cv2.GaussianBlur(image,(5,5),0) 
    cv2.imshow('B-Gaussian',image)
    b = blur.copy()

# set green and red channels to 0
    b[:, :, 1] = 0
    b[:, :, 2] = 0
    cv2.imshow('B-RGB', b)
    image1 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    image1 = np.float32(image1)
    image1 /= 255


# Wavelet transform of image, and plot approximation and details
    titles = ['LL', ' LH',
          'HL', 'HH']
    coeffs2 = pywt.dwt2(image1, 'bior1.3')
    LL, (LH, HL, HH) = coeffs2
    fig = plt.figure(figsize=(12, 3))
    for i, a in enumerate([LL, LH, HL, HH]):
        ax = fig.add_subplot(1, 4, i + 1)
        ax.imshow(a, interpolation="nearest", cmap=plt.cm.gray)
        ax.set_title(titles[i], fontsize=10)
        ax.set_xticks([])
        ax.set_yticks([])

    fig.tight_layout()
    plt.show()



def dwt_g(image):
    blur = cv2.GaussianBlur(image,(5,5),0) 
    cv2.imshow('B-Gaussian',image)
    g = blur.copy()

# set green and red channels to 0
    g[:, :, 0] = 0
    g[:, :, 2] = 0
    cv2.imshow('G-RGB', g)
    image1 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    image1 = np.float32(image1)
    image1 /= 255


# Wavelet transform of image, and plot approximation and details
    titles = ['LL', ' LH',
          'HL', 'HH']
    coeffs2 = pywt.dwt2(image1, 'bior1.3')
    LL, (LH, HL, HH) = coeffs2
    fig = plt.figure(figsize=(12, 3))
    for i, a in enumerate([LL, LH, HL, HH]):
        ax = fig.add_subplot(1, 4, i + 1)
        ax.imshow(a, interpolation="nearest", cmap=plt.cm.gray)
        ax.set_title(titles[i], fontsize=10)
        ax.set_xticks([])
        ax.set_yticks([])

    fig.tight_layout()
    plt.show()
 


def dwt_r(image):
    blur = cv2.GaussianBlur(image,(5,5),0) 
    cv2.imshow('B-Gaussian',image)
    r = blur.copy()

# set green and red channels to 0
    r[:, :, 0] = 0
    r[:, :, 1] = 0
    cv2.imshow('R-RGB', r)
    image1 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    image1 = np.float32(image1)
    image1 /= 255


# Wavelet transform of image, and plot approximation and details
    titles = ['LL', ' LH',
          'HL', 'HH']
    coeffs2 = pywt.dwt2(image1, 'bior1.3')
    LL, (LH, HL, HH) = coeffs2
    fig = plt.figure(figsize=(12, 3))
    for i, a in enumerate([LL, LH, HL, HH]):
        ax = fig.add_subplot(1, 4, i + 1)
        ax.imshow(a, interpolation="nearest", cmap=plt.cm.gray)
        ax.set_title(titles[i], fontsize=10)
        ax.set_xticks([])
        ax.set_yticks([])

    fig.tight_layout()
    plt.show()

#image = cv2.imread('E:/New folder/project2/orl_faces/test2/test2.jpg',1)
#cv2.imshow('input image',image)

im2=list(range(10))
def load_images_from_folder(folder):  # function loading the program  from folder#
    images = []
    for filename in os.listdir(folder):   # opening the file from the folder#     
        img = cv2.imread(os.path.join(folder,filename)) #reading the image from the folder and file#
        if img is not None:
            images.append(img)     #updating the images#
    return images
E=load_images_from_folder('E:/New folder/project2/orl_faces/test2')  #E= reading the folder#
for n in range(10):  # n is variable#
    im2[n]= extract(E[n]) # jumps to function extract takes only LL#
image=cv2.imread('E:/New folder/project2/orl_faces/test1/test2.jpg')# reads the test images#
dwt_b(image)
dwt_g(image)
dwt_r(image)
tst = extract(image)  # jumps to the function extract and collects LA#

def euc_dist( tst, db):    #finds euclidian distance between the two images#
                       return np.sum((tst-db)**2)   # returns the sum value( x1-x2) square#
k=0                    
for r in range(10):
       E4=euc_dist(im2[r],tst) # jumps t0 function euclidian#
       N[k]=E4   # stores it in E4#
       k+=1
large1=max(N)    # large = maxm value of N#
for u in range(10):
        #E2=euc_dist(T1,database[r]
        N[u]=N[u]/large1  # rounds of the value#
if N[u]<=0.55:
          print('Match found')  # Thresholding#
elif N[u]>0.55:
          print('Match not found')       
cv2.waitKey(0)
cv2.destroyAllWindows()

